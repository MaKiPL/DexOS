;=========================================================;
; Command                                      12/01/2011 ;
;---------------------------------------------------------;
; Checks for command.                                     ;
;                                                         ;
; (c) Craig Bamford, All rights reserved.                 ;
;=========================================================;
use32							  ;
	ORG	0x400000				  ;
	jmp	start					  ;
	db	'DEXX'					  ;
;=======================================================  ;
;  Start.                                                 ;
;=======================================================  ; 
start:							  ;
	mov	ax,18h					  ;
	mov	ds,ax					  ;
	mov	es,ax					  ;
;=======================================================  ;
; Get calltable address.                                  ;
;=======================================================  ;
	mov	edi,Functions				  ; fill the function table
	mov	al,0					  ; so we have some usefull functions
	mov	ah,0x0a 				  ;
	int	50h					  ;
;=======================================================  ;
;  Command.                                               ;
;=======================================================  ; 
StartCommand:						  ;
	mov	byte[GuiVer],0				  ;
	call	[Clstext]				  ;
	call	ReadyPrompt				  ;
  DisplayPrompt:					  ;
	cmp	dword[LoadAstart],1			  ; test for first time command.com run
	je	NotTheFirstTime 			  ;
	mov	[LoadAstart],1				  ;
	mov	esi,LoadingStartupMes			  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
;  Test if fat module is loaded                           ;
;=======================================================  ;
	mov	esi,ID					  ;
	call	[ModuleFunction]			  ;
	jc	NotTheFirstTime 			  ;
	mov	[Fatmod],eax				  ;
	mov	esi,CreateFileTempDirBuff+1		  ;
	mov	eax,15					  ;
	call	[Fatmod]				  ; Get_Current_Directory
	mov	edx,ModuleDir				  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	jc	DirMdir_error				  ;
	call	LoadConfigFile				  ; load startup.bat
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
  DirMdir_error:					  ;
	mov	edx,CreateFileTempDirBuff		  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	call	TryLoadGUI				  ;
	jc	Gui_load_error				  ;
	mov	byte[GUI_OK],1				  ;
  Gui_load_error:					  ;
	call	ReadyPrompt2				  ;
  NotTheFirstTime:					  ;
	call	Prompt					  ;
	xor	ecx,ecx 				  ;
	xor	edx,edx 				  ;
  CheckForKey:						  ;
	call	GetCommand				  ;
	call	ProcessCmd				  ;
	jmp	CheckForKey				  ;
;=======================================================  ;
; Process Command.                                        ;
;=======================================================  ;
ProcessCmd:						  ;
	pushad						  ;
	push	es					  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	mov	edi,dword[CommandBufferAddress] 	  ;
	call	[UpperCase]				  ;
;=======================================================  ;
;  CLS.                                                   ;                 
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,4					  ;
	mov	edi,cCLS				  ;
	repe	cmpsb					  ;
	jne	not_cls 				  ;
	call	[Clstext]				  ;
	jmp	ExitFoundCls				  ;
  not_cls:						  ;
;=======================================================  ;
;  TIME.                                                  ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,5					  ;     
	mov	edi,cTIME				  ;
	repe	cmpsb					  ;
	jne	not_time				  ;
	call	print_time1				  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_time:						  ;
;=======================================================  ;
;  DATE.                                                  ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,5					  ;     
	mov	edi,cDATE				  ;
	repe	cmpsb					  ;
	jne	not_date				  ;
	call	print_date1				  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_date:						  ;
;=======================================================  ;
;  HELP.                                                  ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,5					  ;     
	mov	edi,cHELP				  ;
	repe	cmpsb					  ;
	jne	not_help				  ;
	mov	esi,HelpMsg				  ;
	call	[PrintString_0] 			  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_help:						  ;
;=======================================================  ;
;  DIR.                                                   ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,4					  ;     
	mov	edi,cDIR				  ;
	repe	cmpsb					  ;
	je	YesDirFunction				  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,4					  ;     
	mov	edi,cDIRa				  ;
	repe	cmpsb					  ;
	jne	not_dir 				  ;
  YesDirFunction:					  ;
	cmp	[Fatmod],0				  ;
	je	NoFat_mod				  ;
	call	DirFunctionMod				  ;
	jc	ExitNotFound				  ;
	jmp	ExitFound				  ;
  NoFat_mod:						  ;
	call	DirFunction				  ;
	jc	ExitNotFound				  ;
	jmp	ExitFound				  ;
  not_dir:						  ;
;=======================================================  ;
;  CD.                                                    ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;
	mov	edi,cCD 				  ;
	repe	cmpsb					  ;
	jne	not_cd					  ;
	call	FindDir 				  ;
	jc	CommandError				  ;
	jmp	ExitFound				  ;
  not_cd:						  ;
;=======================================================  ;
;  COPY.                                                  ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,5					  ;     
	mov	edi,cCOPY				  ;
	repe	cmpsb					  ;
	jne	not_copy				  ;
	call	CopyFileCommand 			  ;
	jc	CommandError				  ;
	jmp	ExitFound				  ;
  not_copy:						  ;
;=======================================================  ;
; Rd.                                                     ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;   
	mov	edi,cRD 				  ;
	repe	cmpsb					  ;
	jne	not_rd					  ;
	mov	esi,DelMessage1a			  ;
	call	[PrintString_0] 			  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,3					  ;
	call	[PrintString_0] 			  ;
	mov	esi,DelMessage2 			  ;
	call	[PrintString_0] 			  ;
  DelMessageLoopRD:					  ;
	call	[WaitForKeyPress]			  ;
	cmp	al,'y'					  ;
	je	DoDeleteDir				  ;
	cmp	al,'Y'					  ;
	je	DoDeleteDir				  ;
	cmp	al,'n'					  ;
	je	ExitFound				  ;
	cmp	al,'N'					  ;
	je	ExitFound				  ;
	jmp	DelMessageLoopRD			  ;
  DoDeleteDir:						  ;
	call	DeleteDir				  ;
	jc	CommandError				  ;
	jmp	ExitFound				  ;
  not_rd:						  ;
;=======================================================  ;
; Del.                                                    ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,4					  ;            
	mov	edi,cDEL				  ;
	repe	cmpsb					  ;
	jne	not_del 				  ;
	mov	esi,DelMessage1 			  ;
	call	[PrintString_0] 			  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,4					  ;
	call	[PrintString_0] 			  ;
	mov	esi,DelMessage2 			  ;
	call	[PrintString_0] 			  ;
  DelMessageLoop:					  ;       
	call	[WaitForKeyPress]			  ;
	cmp	al,'y'					  ;
	je	DoDeleteFile				  ;
	cmp	al,'Y'					  ;
	je	DoDeleteFile				  ;
	cmp	al,'n'					  ;
	je	ExitFound				  ;
	cmp	al,'N'					  ;
	je	ExitFound				  ;
	jmp	DelMessageLoop				  ;
  DoDeleteFile: 					  ;
	cmp	dword[Fatmod],0 			  ;
	je	DeleteFileNoFatMod			  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,4					  ;
	mov	eax,12					  ;
	call	[Fatmod]				  ; Delete file
	jnc	ExitFound				  ;
	mov	esi,DelErrorMes 			  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  DeleteFileNoFatMod:					  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,4					  ;
	mov	al,0					  ;
	call	[DeleteFile]				  ;
	jnc	ExitFound				  ;
	mov	esi,DelErrorMes 			  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_del:						  ;
;=======================================================  ;
;  REN.                                                   ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,4					  ;     
	mov	edi,cREN				  ;
	repe	cmpsb					  ;
	jne	not_ren 				  ;
	cmp	dword[Fatmod],0 			  ;
	je	ReNameFileNoFatMod			  ;
	call	RenDirFile_mod				  ;
	jnc	ExitFound				  ;
	mov	esi,RenErrorMes 			  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  ReNameFileNoFatMod:					  ;
	call	RenDirFile				  ;
	jnc	ExitFound				  ;
	mov	esi,RenErrorMes 			  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_ren:						  ;
;=======================================================  ;
;  MD.                                                    ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;             
	mov	edi,cMD 				  ;
	repe	cmpsb					  ;
	jne	not_md					  ;
	call	MakeDir 				  ;
	jc	CommandError				  ;
	jmp	ExitFound				  ;
  not_md:						  ;
;=======================================================  ;
;  RMF.                                                   ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;     
	mov	edi,cRMF				  ;
	repe	cmpsb					  ;
	jne	not_rmf 				  ;
	call	[ReMountFdd]				  ;
	jmp	ExitFound				  ;
  not_rmf:						  ;
;=======================================================  ;
;  GUI.                                                   ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;     
	mov	edi,cGUI				  ;
	repe	cmpsb					  ;
	jne	not_gui 				  ;
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	cmp	byte[GUI_OK],1				  ;
	jne	NoGuiLoaded				  ;
	mov	ax,18h					  ;
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	ImageLoadAddrVarGUI			  ;
	mov	ax,18h					  ;                             
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	SetPalette				  ;
  NoGuiLoaded:						  ;
	jmp	ExitFound				  ;
  not_gui:						  ;
;=======================================================  ;
;  MORE.                                                  ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,5					  ;
	mov	edi,cMORE				  ;
	repe	cmpsb					  ;
	jne	not_more				  ;
	call	MoreCommand				  ;
	jc	CommandError				  ;
	jmp	ExitFound				  ;
  not_more:						  ;
;=======================================================  ;
;  VER.                                                   ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	cx,3					  ;     
	mov	edi,cVER				  ;
	repe	cmpsb					  ;
	jne	not_ver 				  ;
	mov	esi,VerMessage				  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
;=======================================================  ;
;  Error codes                                            ;
;=======================================================  ;
  CommandError: 					  ;
	cmp	al,1					  ;
	jne	@f					  ;
	mov	esi,Error1				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,2					  ;
	jne	@f					  ;
	mov	esi,Error2				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,3					  ;
	jne	@f					  ;
	mov	esi,Error3				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,4					  ;
	jne	@f					  ;
	mov	esi,Error4				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,5					  ;
	jne	@f					  ;
	mov	esi,Error5				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,6					  ;
	jne	@f					  ;
	mov	esi,Error6				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,7					  ;
	jne	@f					  ;
	mov	esi,Error7				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,8					  ;
	jne	@f					  ;
	mov	esi,Error8				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,9					  ;
	jne	@f					  ;
	mov	esi,Error9				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0ah					  ;
	jne	@f					  ;
	mov	esi,Error10				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0bh					  ;
	jne	@f					  ;
	mov	esi,Error11				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0ch					  ;
	jne	@f					  ;
	mov	esi,Error12				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0dh					  ;
	jne	@f					  ;
	mov	esi,Error13				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0eh					  ;
	jne	@f					  ;
	mov	esi,Error14				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,0fh					  ;
	jne	@f					  ;
	mov	esi,Error15				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,11h					  ;
	jne	@f					  ;
	mov	esi,Error17				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,50h					  ;
	jne	@f					  ;
	mov	esi,Error80				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	cmp	al,255					  ;
	jne	@f					  ;
	mov	esi,Error0feh				  ;
	jmp	Print_error_code			  ;
  @@:							  ;
	mov	esi,ErrorFF				  ;
	call	[PrintString_0] 			  ;
	call	[WriteHex8]				  ;
	jmp	ExitFound				  ;
  Print_error_code:					  ;
	call	[PrintString_0] 			  ;
	jmp	ExitFound				  ;
  not_ver:						  ;
;=======================================================  ;
;  Check for EXE.                                         ;
;=======================================================  ;
	call	RunExeCommand				  ;
	jc	ExitNotFound				  ;
	jmp	ExitFound				  ;
;=======================================================  ;
;  Exit no command or file found.                         ;
;=======================================================  ;
  ExitNotFound: 					  ;
	mov	esi,BadCommand				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
;  Exit  command or file found.                           ;
;=======================================================  ;
  ExitFound:						  ;
  ExitFoundCls: 					  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	call	Prompt					  ;
	pop	es					  ;
	popad						  ;
	ret						  ;
;=======================================================  ;
; Get Command.                                            ;
;=======================================================  ;
GetCommand:						  ;
	call	[GetCommandStored]			  ;
	mov	dword[CommandBufferAddress],edi 	  ;
	ret						  ;

;=======================================================  ;
;  Data.                                                  ;
;=======================================================  ;
    LoadAstart	       dd  0				  ;
    craicount	       dw  0				  ;    
    CliBuffcount       dw  0				  ;
    CdCount	       db  0				  ;
    GuiVer	       db  0				  ;
    GUI_OK	       db  0
    CmdSize = 0x80					  ;
    CommandBuffer:     times  128	db 0		  ;
    CommandBuffer2:    times  128	db 0		  ;
    CommandBufferAddress dd 0				  ;
;=======================================================  ;
; commands.                                               ;
;=======================================================  ;           
    cCLS	       db 'CLS',0			  ;
    cTIME	       db 'TIME',0			  ;
    cDATE	       db 'DATE',0			  ;
    cDIR	       db 'DIR',0			  ;
    cDIRa	       db 'DIR ',0			  ;
    cMD 	       db 'MD ',0			  ;
    cCD 	       db 'CD ',0			  ;
    cMORE	       db 'MORE ',0			  ;
    cDEL	       db 'DEL ',0			  ;
    cCOPY	       db 'COPY ',0			  ;
    cRD 	       db 'RD ',0			  ;
    cREN	       db 'REN ',0			  ;
    cHELP	       db 'HELP',0			  ;
    cVER	       db 'VER',0			  ;
    cRMF	       db 'RMF',0			  ;
    cGUI	       db 'GUI',0			  ;
;=======================================================  ;
; Strings.                                                ;
;=======================================================  ; 
ID		       db 'DEXOSFAT',0			  ;
nextline:	       db  13,10,0			  ;
BadCommand:	       db 'Bad command or file name',13,10,0

LoadingStartupMes:     db 'Loading startup.bat..',13,10,0

StartMsg:	   db 13,10,0xd2,0x09,'DexOS',13,10
		   db '  (',0xd2,0x01,'C',0xd2,0x09,')Copyright Craig Bamford 2001-2012.',0xd2,0x07,13,13,10,0

HelpMsg:	   db 13, 10
		   db 'List of supported DexOS commands: ', 13, 10
		   db 0xd2,0x02,' HELP        ',0xd2,0x07,'- Print out this list. ', 13, 10
		   db 0xd2,0x02,' CLS         ',0xd2,0x07,'- Clear the screen. ', 13, 10
		   db 0xd2,0x02,' TIME        ',0xd2,0x07,'- Displays current time. ', 13, 10
		   db 0xd2,0x02,' DATE        ',0xd2,0x07,'- Displays current date. ', 13, 10
		   db 0xd2,0x02,' GUI         ',0xd2,0x07,'- Returns to the gui.', 13, 10
		   db 0xd2,0x02,' VER         ',0xd2,0x07,'- Prints the kernel ver & assembly date.', 13, 10
		   db 0xd2,0x02,' CD   [d]    ',0xd2,0x07,'- Change to the dir [d].', 13, 10
		   db 0xd2,0x02,' RD   [d]    ',0xd2,0x07,'- Removes an empty directory (You need to make sure its empty) ', 13, 10
		   db 0xd2,0x02,' DEL  [f]    ',0xd2,0x07,'- Delete the file [f].', 13, 10
		   db 0xd2,0x02,' REN  [f] [f]',0xd2,0x07,'- Rename file or dir. [f] to [f], new file use name only. ', 13, 10
		   db 0xd2,0x02,' COPY [f] [d]',0xd2,0x07,'- Copies one file to another location.', 13, 10
		   db 0xd2,0x02,' MORE [f]    ',0xd2,0x07,'- Prints file [f], to screen.', 13, 10
		   db 0xd2,0x02,' DIR path    ',0xd2,0x07,'- List all files in the dir.', 13, 10
		   db 0xd2,0x02,' MD [d] path ',0xd2,0x07,'- Makes a new dir. ', 13, 10
		   db 0xd2,0x02,' RMF         ',0xd2,0x07,'- Remounts root dir. ', 13, 10
		   db 'more to come!',0

;=======================================================  ;
; include.                                                ;
;=======================================================  ;
include 'Commands.inc'					  ;
include 'Ver.inc'					  ;
include 'AutoDex.inc'					  ;
include 'Message.inc'					  ;
include 'View.inc'					  ;
align 4 						  ;
ListBuffer:				rb  1024*15	  ;
include 'Dex.inc'					  ;

