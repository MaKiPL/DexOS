;=========================================================;
; Command                                      01/05/2011 ;
;---------------------------------------------------------;
;                                                         ;
; (c) Craig Bamford, All rights reserved.                 ;
;=========================================================;

;=======================================================  ;
;  Ready prompt                                           ;
;=======================================================  ; 
ReadyPrompt:						  ;
	call	SetPalette				  ;
	call	[GetBootDrive]				  ;
	mov	byte[PromptLetter],al			  ;
	mov	[textcolor],0x07			  ;
	mov	al,0x07 				  ;
	call	[TextColor]				  ;
ReadyPrompt2:
	mov	esi,StartMsg				  ;
	call	[PrintString_0] 			  ;
	ret						  ;

;=======================================================  ;
;  Ready prompt                                           ;
;=======================================================  ; 
Prompt: 						  ;
	pushad						  ;
	mov	al,[textcolor]				  ;
	mov	[textcolorsave],al			  ;
	mov	[textcolor],0x09			  ;
	mov	al,0x09 				  ;
	call	[TextColor]				  ;
	call	[GetBootDrive]				  ;
	inc	bl					  ;
	add	bl,40h					  ;
	mov	byte[DriveCLI],bl			  ;
	mov	esi,DriveCLI				  ;
	call	[PrintString_0] 			  ;
	cmp	dword[Fatmod],0 			  ;
	je	ItsTheAdir				  ;
	mov	esi,CliDirBuff				  ;
	mov	eax,15					  ;
	call	[Fatmod]				  ; Get_Current_Directory
	mov	esi,CliDirBuff				  ;
	call	[PrintString_0] 			  ;
ItsTheAdir:						  ;
	mov	esi,promptEnd				  ;
	call	[PrintString_0] 			  ;
	mov	al,[textcolorsave]			  ;
	mov	[textcolor],al				  ;
	call	[TextColor]				  ;
	popad						  ;
	ret						  ;

;=======================================================  ;
;  print_time1                                            ;
;=======================================================  ; 
print_time1:						  ;
	pushad						  ;
	call	 [print_time]				  ;
	popad						  ;
	ret						  ; 
   
;=======================================================  ;
;  print_date1                                            ;
;=======================================================  ; 
print_date1:						  ;
	pushad						  ;
	call	 [print_date]				  ;
	popad						  ;
	ret						  ;
Gui_string db 'gui.bin',0				  ;
;=======================================================  ;
;  TryLoadGUI                                             ;
;=======================================================  ;
TryLoadGUI:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	dword[File_handle_cli],0		  ;
	mov	ax,18h					  ;     
	mov	es,ax					  ;
	mov	edx,Gui_string				  ;
	mov	eax,9					  ; Open file
	call	[Fatmod]				  ;
	jc	RunExeCommandExitError			  ;
	xor	ebx,ebx 				  ;
	mov	bx,ax					  ;
	mov	dword[File_handle_cli],ebx		  ;
	mov	edx,ImageLoadAddrVarGUI 		  ;
	mov	eax,11					  ; Read file
	call	[Fatmod]				  ;
	jc	RunExeCommandExitError_H_close		  ;
LoadDex_GUI:						  ;
	mov	esi,ImageLoadAddrVarGUI 		  ;
	add	esi,2					  ;
	cmp	dword[ds:esi],'GUI6'			  ;
	je	ItsaDexProg_GUI 			  ;
	add	esi,3					  ;
	cmp	dword[ds:esi],'GUI6'			  ;
	jne	NotaDexProg_GUI 			  ;
ItsaDexProg_GUI:					  ;
	mov	ax,18h					  ;
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	ImageLoadAddrVarGUI			  ;
	mov	ax,18h					  ;                             
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	SetPalette				  ;
	cmp	dword[File_handle_cli],0		  ;
	jne	RunExeCommandExitOK_H_close_GUI 	  ;
;=======================================================  ;
; RunExeCommandExitOK_GUI                                 ;
;=======================================================  ;
RunExeCommandExitOK_GUI:				  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ; 
	ret						  ;
;=======================================================  ;
; RunExeCommandExitOK_H_close_GUI                         ;
;=======================================================  ;
RunExeCommandExitOK_H_close_GUI:			  ;
	mov	ebx,dword[File_handle_cli]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ; 
	ret						  ;

;=======================================================  ;
; NotaDexProg_GUI                                         ;
;=======================================================  ;
NotaDexProg_GUI:					  ;
	mov	ebx,dword[File_handle_cli]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	mov	esi,NotADexProg 			  ;
	call	[PrintString_0] 			  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	stc						  ;
	ret						  ;
							  ;
GetListBufferAddress	 dd 0				  ;
GetListFile_Count	 dd 0				  ;
GetListBufferAddrAddOn	 dd 0				  ;
ListSet 		 db 0				  ;
;=======================================================  ;
;  DirFunction                                            ;
;=======================================================  ; 
DirFunction:						  ; 
	pushad						  ;
	mov	dword[GetListBufferAddrAddOn],0 	  ;
	call	[AnyFatUpdate]				  ;
	cmp	eax,0					  ;
	jne	ListAsBeenSet				  ;
	call	GetList 				  ;
	jc	DirFunctionExitError			  ;
	mov	dword[GetListBufferAddress],esi 	  ;
	mov	dword[GetListFile_Count],ebx		  ;
ListAsBeenSet:						  ;
	mov	esi,DirString				  ;
	call	[PrintString_0] 			  ;
	mov	al,[textcolor]				  ;
	mov	[textcolorsave],al			  ;
	mov	[textcolor],0x02			  ;
	mov	al,0x02 				  ;
	call	[TextColor]				  ;
	mov	esi,ListBuffer				  ;
	mov	ecx,dword[GetListFile_Count]		  ;
	cmp	ecx,0					  ;
	je	NoDexFILEfound				  ;
MainListLoop:						  ;
	pushad						  ;
	call	[PrintString_0] 			  ;
	mov	esi,nextline				  ;
	call	[PrintString_0] 			  ;
	popad						  ;
	add	esi,15					  ;
	loop	MainListLoop				  ;
	mov	al,[textcolorsave]			  ;
	mov	[textcolor],al				  ;
	call	[TextColor]				  ;
;=======================================================  ;
; DirFunctionExitOK                                       ;
;=======================================================  ; 
DirFunctionExitOK:					  ;
	popad						  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
; NoDexFILEfound.                                         ;
;=======================================================  ; 
NoDexFILEfound: 					  ;
	mov	esi,NoDexFMessage			  ;
	call	[PrintString_0] 			  ;
	mov	al,[textcolorsave]			  ;
	mov	[textcolor],al				  ;
	call	[TextColor]				  ;
	popad						  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
; DirFunctionExitError                                    ;
;=======================================================  ; 
DirFunctionExitError:					  ;
	popad						  ;
	stc						  ;
	ret						  ;
ImageLoadAddrVarGUI = 0x800000				  ; Gui load address
ImageLoadAddrVar  = 0x1A00000				  ; App load address
File_handle_cli   = 0					  ;
;=======================================================  ;
;  RunExeCommand                                          ;
;=======================================================  ; 
RunExeCommand:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	dword[File_handle_cli],0		  ;
	mov	ax,18h					  ;     
	mov	es,ax					  ;
;=======================================================  ;
;  Clear buffer 1                                         ;
;=======================================================  ; 
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff1				  ;
	rep	stosb					  ;
;=======================================================  ;
;  Convert file name                                      ;
;=======================================================  ; 
	mov	esi,dword[CommandBufferAddress] 	  ;
	mov	edi,TempBuff1				  ;
	mov	ecx,64					  ;
SetExtLoop:						  ;
	lodsb						  ;
	cmp	al,'.'					  ;
	je	extOK2					  ;
	cmp	al,' '					  ;
	je	extOK1					  ;
	cmp	al,0					  ;
	je	extOK1					  ;
	stosb						  ;
	loop	SetExtLoop				  ;
;=======================================================  ;
;  add file ext.                                          ;
;=======================================================  ; 
  extOK1:						  ;
	mov	al,'.'					  ;
	stosb						  ;
	mov	al,'D'					  ;
	stosb						  ;
	mov	al,'E'					  ;
	stosb						  ;
	mov	al,'X'					  ;
	stosb						  ;
	mov	al,0					  ;
	stosb						  ;
	jmp	TryOpenFile				  ;
  extOK2:						  ;
	stosb						  ;
	mov	ecx,3					  ;
	rep	movsb					  ;
	mov	al,0					  ;
	stosb						  ;
;=======================================================  ;
;  Try to open file.                                      ;
;=======================================================  ; 
TryOpenFile:						  ;
	cmp	dword[Fatmod],0 			  ;
	jne	LoadDex_FILE_useMod			  ;
	mov	edi,TempBuff1				  ;
	mov	edx,ImageLoadAddrVar			  ;
	call	[ReadFileFat]				  ;
	jc	RunExeCommandExitError			  ;
	jmp	LoadDex_FILE				  ;
LoadDex_FILE_useMod:					  ;
	mov	edx,TempBuff1				  ;
	mov	eax,9					  ; Open file
	call	[Fatmod]				  ;
	jc	RunExeCommandExitError			  ;
	xor	ebx,ebx 				  ;
	mov	bx,ax					  ;
	mov	dword[File_handle_cli],ebx		  ;
	mov	edx,ImageLoadAddrVar			  ;
	mov	eax,11					  ; Read file
	call	[Fatmod]				  ;
	jc	RunExeCommandExitError_H_close		  ;
LoadDex_FILE:						  ;
	mov	esi,ImageLoadAddrVar			  ;
	add	esi,2					  ;
	cmp	dword[ds:esi],'DEX6'			  ;
	je	ItsaDexProg				  ;
	add	esi,3					  ;
	cmp	dword[ds:esi],'DEX6'			  ;
	jne	NotaDexProg				  ;
ItsaDexProg:						  ;
	mov	ax,18h					  ;
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	ImageLoadAddrVar			  ;                                    
	mov	ax,18h					  ;                             
	mov	ds,ax					  ;
	mov	es,ax					  ;
	xor	eax,eax 				  ;
	mov	ebx,eax 				  ;
	mov	ecx,eax 				  ;
	mov	edx,eax 				  ;
	mov	esi,eax 				  ;
	mov	edi,eax 				  ;
	call	SetPalette				  ;
	cmp	dword[File_handle_cli],0		  ;
	jne	RunExeCommandExitOK_H_close		  ;
;=======================================================  ;
; RunExeCommandExitOK                                     ;
;=======================================================  ;
RunExeCommandExitOK:					  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ; 
	ret						  ;
;=======================================================  ;
; RunExeCommandExitOK_H_close                             ;
;=======================================================  ;
RunExeCommandExitOK_H_close:				  ;
	mov	ebx,dword[File_handle_cli]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ; 
	ret						  ;
;=======================================================  ;
; NotaDexProg                                             ;
;=======================================================  ;
NotaDexProg:						  ;
	mov	ebx,dword[File_handle_cli]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	mov	esi,NotADexProg 			  ;
	call	[PrintString_0] 			  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ; 
	ret						  ;
;=======================================================  ;
; RunExeCommandExitError                                  ;
;=======================================================  ;
RunExeCommandExitError: 				  ;
	pop    ds					  ;
	pop    es					  ;    
	popad						  ;
	stc						  ;
	ret						  ;
;=======================================================  ;
; RunExeCommandExitError_H_close                          ;
;=======================================================  ;
RunExeCommandExitError_H_close: 			  ;
	mov	ebx,dword[File_handle_cli]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop    ds					  ;
	pop    es					  ;    
	popad						  ;
	stc						  ;
	ret						  ;

DefaultListNumber = 1024				  ;
;=======================================================  ;
;  GetList.                                               ;
;=======================================================  ;
GetList:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	ax,18h					  ;
	mov	ds,ax					  ;
	mov	es,ax					  ;
	mov	edi,ListBuffer				  ;
	mov	ecx,15*DefaultListNumber		  ;
	mov	al,0					  ;
	rep	stosb					  ;
	mov	ecx,DefaultListNumber			  ;
	mov	edi,ListBuffer				  ;
	xor	eax,eax 				  ;
	mov	ax,'DE' 				  ; just load dex files (0 for all files)
	call	[DirFileList]				  ;
	jc	GetListError				  ;
;=======================================================  ;
; GetListExitOK                                           ;
;=======================================================  ;
	mov	dword[File_Count],ecx			  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	mov	esi,ListBuffer				  ;
	mov	edi,ListBuffer				  ;
	mov	ebx,dword[File_Count]			  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
; GetListExitError                                        ;
;=======================================================  ;
GetListError:						  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	stc						  ;
	ret						  ;

DeleteDirErrorCode    db  0
;=======================================================  ;
;  DeleteFile.                                            ;
;=======================================================  ;
DeleteDir:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	al,5					  ;
	cmp	dword[Fatmod],0 			  ;
	je	DeleteDirError				  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,3					  ;
	mov	eax,6					  ; Remove subdirectory
	call	[Fatmod]				  ;
	jc	DeleteDirError				  ;
;=======================================================  ;
;  close file.                                            ;
;=======================================================  ; 
  DeleteDirOK:						  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ;
	ret						  ;

;=======================================================  ;
;  Error.                                                 ;
;=======================================================  ;   
  DeleteDirError:					  ;
	mov    byte[DeleteDirErrorCode],al		  ; save al error code
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	mov    al,byte[DeleteDirErrorCode]		  ; save al error code
	stc						  ;
	ret						  ;                                             

;=======================================================  ;
; RenDirFile                                              ;
;=======================================================  ;
RenDirFile:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	ax,18h					  ;     
	mov	es,ax					  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff1a				  ;
	rep	stosb					  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff2a				  ;
	rep	stosb					  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,4
	mov	edi,TempBuff1a				  ;
	mov	ecx,64					  ;
  RenDirFileLoop1:					  ;
	lodsb						  ;
	cmp	al,' '					  ;
	je	FillBuffer2				  ;
	stosb						  ;
	loop	RenDirFileLoop1 			  ;
  FillBuffer2:						  ;
	mov	al,0					  ;
	stosb						  ;
	mov	edi,TempBuff2a				  ;
	mov	ecx,64					  ;
  RenDirFileLoop2:					  ;
	lodsb						  ;
	cmp	al,0					  ;
	je	Buff2Filled				  ;
	stosb						  ;
	loop	RenDirFileLoop2 			  ;
	mov	al,0					  ;
  Buff2Filled:						  ;
	stosb						  ;
	mov	esi,TempBuff1a				  ;
	mov	edi,TempBuff2a				  ;
	call	[ReNameFile]				  ;
	jc	RenDirFileError 			  ;
  RenDirFileOk: 					  ;
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	clc						  ;
	ret						  ;
							  ;
  RenDirFileError:					  ;
	mov    word[RNFErrorCode],ax			  ; save ax error code
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	mov    ax,word[RNFErrorCode]			  ; save ax error code
	stc						  ;
	ret						  ;

TypeErrorCode	      db  0				  ;
File_handle_cli_type  dd  0				  ;
NumberOfBytesRead     dd  0				  ;
;=======================================================  ;
;  MoreCommand.                                           ;
;=======================================================  ;
MoreCommand:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	dword[File_handle_cli_type],0		  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
	mov	ecx,64					  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,5					  ;
  FindZero:						  ;
	lodsb						  ;
	cmp	al,0					  ;
	je	FoundZero				  ;
	loop	FindZero				  ;
	mov	al,255					  ;
	jmp	TypeCommandError2			  ;
  FoundZero:						  ;
	mov	eax,dword[esi-5]			  ;
	cmp	eax,'.ASM'				  ;
	je	TypeCommandRightFileType		  ;
	cmp	eax,'.TXT'				  ;
	je	TypeCommandRightFileType		  ;
	mov	al,255					  ;
	jmp	TypeCommandError2			  ;
  TypeCommandRightFileType:				  ;
;=======================================================  ;
;  open file.                                             ;
;=======================================================  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,5					  ;
	mov	eax,9					  ; Open file
	call	[Fatmod]				  ;
	jc	TypeCommandError2			  ;
	xor	ebx,ebx 				  ;
	mov	bx,ax					  ;
	mov	dword[File_handle_cli_type],ebx 	  ;
	mov	edx,ImageLoadAddrVar			  ;
	mov	eax,11					  ; Read file
	call	[Fatmod]				  ;
	jc	TypeCommandError			  ;
	call	ViewText				  ;
;=======================================================  ;
;  close file no error                                    ;
;=======================================================  ;
  TypeFinish:						  ;
	mov	ebx,dword[File_handle_cli_type] 	  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
;  close file error                                       ;
;=======================================================  ;   
  TypeCommandError:					  ;
	mov	ebx,dword[File_handle_cli_type] 	  ;
	push	eax					  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop	eax					  ;
;=======================================================  ;
;  Error.                                                 ;
;=======================================================  ;   
  TypeCommandError2:					  ;
	mov    byte[TypeErrorCode],al			  ; save al error code
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	mov    al,byte[TypeErrorCode]			  ; save al error code
	stc						  ;
	ret						  ;

;=======================================================  ;
; PALETTE.                                                ;
;=======================================================  ;
Palette:						  ;
	pushad						  ;
	mov	dx,3c8h 				  ;                      
	out	dx,al					  ;
	inc	dx					  ;             
	mov	al,bl					  ;                              
	out	dx,al					  ;
	mov	al,bh					  ;                      
	out	dx,al					  ;
	mov	al,cl					  ;                              
	out	dx,al					  ;
	popad						  ;
	ret						  ;

;=======================================================  ;
; SetPalette                                              ;
;=======================================================  ;
SetPalette:						  ;
	mov	al,2					  ;
	mov	bx,0x3f3f				  ;
	mov	cl,43					  ;
	call	Palette 				  ;                         
	mov	al,4					  ;
	mov	cl,63					  ;
	call	Palette 				  ;                           
	mov	al,5					  ;
	mov	bx,0x3228				  ;
	call	Palette 				  ;                            
	mov	al,7					  ;
	call	Palette 				  ;                    
	mov	al,5					  ;
	mov	bx,0x0032				  ;
	mov	cl,0					  ;
	call	Palette 				  ;
	mov	al,58					  ;
	mov	bx,0x0A00				  ;
	call	Palette 				  ;
	inc	al					  ;
	mov	bh,40					  ;
	call	Palette 				  ;
	mov	al,56					  ;
	mov	bx,0x1010				  ;
	mov	cl,32					  ;
	call	Palette 				  ;
	mov	al,60					  ;
	mov	bx,0x1818				  ;
	mov	cl,48					  ;
	call	Palette 				  ;
	ret						  ;

;=======================================================  ;
; Data.                                                   ;
;=======================================================  ;
RNFErrorCode  dw 0
textcolor     db 0					  ;
textcolorsave db 0					  ;
							  ;
DelErrorMes   db 'Error deleting file.',13,10,0 	  ;
							  ;
RenErrorMes   db 'Error renaming file.',13,10,0 	  ;
							  ;
DelMessage1a  db 'Before removing dir, make sure its empty eg: only . and .. ',10,13;
DelMessage1   db 'Are you sure you want delete ',0	  ;
DelMessage2   db ' Y/N ?.',13,10,0			  ;
							  ;
NoDexFMessage db 'No .dex files found on drive.',13,10,0  ;                                                         ;
NotADexProg   db 'Not a valid DexOS program',13,10,0	  ;
							  ;
DirString     db 'Root dir of ' 			  ;
PromptLetter  db 0					  ;
PromptNL      db  ':\',13,10,0				  ;
							  ;
DriveCLI      db 0					  ;
	      db ':\',0 				  ;
CliDirBuff:   db 64 dup(' ')				  ;
	      db 0					  ;
promptEnd     db '>',0					  ;
							  ;
TempBuff1a:   db 68 dup(' ')				  ;
	      db 0					  ;
							  ;
TempBuff2a:   db 64 dup(' ')				  ;
	      db 0					  ;
							  ;
TempBuff1:    db 68 dup(' ')				  ;
	      db 0					  ;
TempBuff2:    db 68 dup(' ')				  ;
	      db 0					  ;
include 'Dir.inc'					  ;
include 'Convert.inc'					  ;
