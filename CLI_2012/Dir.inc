FatModErrorCode   db 0					  ;
CopyFileErrorCode db 0					  ;
File_handle_Copy  dd 0					  ;
FileSizeCopy	  dd 0					  ;
;=======================================================  ;
;  Copy File Command                                      ;
;=======================================================  ; 
CopyFileCommand:					  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	mov	al,5					  ;
	cmp	dword[Fatmod],0 			  ;
	je	CopyFileError				  ;
	mov	dword[FileSizeCopy],0			  ;
	mov	dword[File_handle_Copy],0		  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
;=======================================================  ;
;  Clear buffer 1                                         ;
;=======================================================  ; 
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff1				  ;
	rep	stosb					  ;
;=======================================================  ;
;  Clear buffer 2                                         ;
;=======================================================  ; 
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff2				  ;
	rep	stosb					  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,5					  ;
	mov	edi,TempBuff1				  ;
	mov	ecx,64					  ;
;=======================================================  ;
;  fill buffer 1 with first name/address.                 ;
;=======================================================  ; 
  CopyFileLoop1:					  ;
	lodsb						  ;
	cmp	al,' '					  ;
	je	FillBuffer2CopyFile			  ;
	stosb						  ;
	loop	CopyFileLoop1				  ;
  FillBuffer2CopyFile:					  ;
	mov	al,0					  ;
	stosb						  ;
	mov	edi,TempBuff2				  ;
	mov	ecx,64					  ;
;=======================================================  ;
;  fill buffer 2 with second name/address.                ;
;=======================================================  ; 
  CopyFileLoop2:					  ;
	lodsb						  ;
	cmp	al,0					  ;
	je	Buff2FilledCopyFile			  ;
	stosb						  ;
	loop	CopyFileLoop2				  ;
	mov	al,0					  ;
  Buff2FilledCopyFile:					  ;
	stosb						  ;
;=======================================================  ;
;  See if destination file exists.                        ;
;=======================================================  ;
	mov	edx,TempBuff2				  ;
	mov	eax,9					  ; Open file
	call	[Fatmod]				  ;
	jc	CopyFileOpenError			  ;
	xor	ebx,ebx 				  ;
	mov	bx,ax					  ;
	mov	dword[File_handle_Copy],ebx		  ;
;=======================================================  ;
;  If it does Best close it and send error code.          ;
;=======================================================  ; 
	mov	ebx,dword[File_handle_Copy]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	mov	ax,50h					  ;
	jmp	CopyFileError				  ;
;=======================================================  ;
;  First check the error, was file not found.             ;
;=======================================================  ; 
  CopyFileOpenError:					  ;
      ;  cmp     al,02h                                   ;
      ;  jne     CopyFileError                            ;
;=======================================================  ;
;  Opening the src file.                                  ;
;=======================================================  ;
	mov	edx,TempBuff1				  ;
	mov	eax,9					  ; Open file
	call	[Fatmod]				  ;
	jc	CopyFileError				  ;
	xor	ebx,ebx 				  ;
	mov	bx,ax					  ;
	mov	dword[File_handle_Copy],ebx		  ;
;=======================================================  ;
;  Read the open file.                                    ;
;=======================================================  ;
	mov	edx,ImageLoadAddrVar			  ;
	mov	eax,11					  ; Read file
	call	[Fatmod]				  ;
	jc	CopyFileError2				  ;
	mov	dword[FileSizeCopy],eax 		  ;
;=======================================================  ;
;  Close file.                                            ;
;=======================================================  ;
	mov	ebx,dword[File_handle_Copy]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
;=======================================================  ;
;  CreateWrite  file.                                     ;
;=======================================================  ;
	mov	edx,ImageLoadAddrVar			  ;
	mov	eax,8					  ; CreateWrite file
	mov	ecx,dword[FileSizeCopy] 		  ;
	mov	ebx,TempBuff2				  ;
	call	[Fatmod]				  ;
	jc	CopyFileError				  ;
;=======================================================  ;
;  exit ok                                                ;
;=======================================================  ; 
  CopyFileOk:						  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ;
	ret						  ;

;=======================================================  ;
;  Error exit, close dest file.                           ;
;=======================================================  ; 
  CopyFileError2:					  ;
	push	eax					  ;
	mov	ebx,dword[File_handle_Copy]		  ;
	mov	eax,10					  ; Close file
	call	[Fatmod]				  ;
	pop	eax					  ;
;=======================================================  ;
;  Error exit.                                            ;
;=======================================================  ; 
  CopyFileError:					  ;
	mov	byte[CopyFileErrorCode],al		  ; save al error code
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	mov	al,byte[CopyFileErrorCode]		  ; save al error code
	stc						  ;
	ret						  ;

;=======================================================  ;
; RenDirFile                                              ;
;=======================================================  ;
RenDirFile_mod: 					  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	cmp	dword[Fatmod],0 			  ;
	je	RenDirFileErrorNoMod			  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff1_mod			  ;
	rep	stosb					  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,TempBuff2_mod			  ;
	rep	stosb					  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,4					  ;
	mov	edi,TempBuff1_mod			  ;
	mov	ecx,64					  ;
  RenDirFileLoop1_mod:					  ;
	lodsb						  ;
	cmp	al,' '					  ;
	je	FillBuffer2_mod 			  ;
	stosb						  ;
	loop	RenDirFileLoop1_mod			  ;
  FillBuffer2_mod:					  ;
	mov	al,0					  ;
	stosb						  ;
	mov	edi,TempBuff2_mod			  ;
	mov	ecx,64					  ;
  RenDirFileLoop2_mod:					  ;
	lodsb						  ;
	cmp	al,0					  ;
	je	Buff2Filled_mod 			  ;
	stosb						  ;
	loop	RenDirFileLoop2_mod			  ;
	mov	al,0					  ;
  Buff2Filled_mod:					  ;
	stosb						  ;
	mov	edx,TempBuff1_mod			  ;
	mov	edi,TempBuff2_mod			  ;
	mov	eax,18					  ;
	call	[Fatmod]				  ; Rename file
	jc	RenDirFile_modError			  ;
  RenDirFileOk_mod:					  ;
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	clc						  ;
	ret						  ;
							  ;
;=======================================================  ;
;  Error module not loaded.                               ;
;=======================================================  ;
  RenDirFileErrorNoMod: 				  ;
	mov	al,5					  ;
;=======================================================  ;
;  ReName file Error.                                     ;
;=======================================================  ;
  RenDirFile_modError:					  ;
	mov    byte[FatModErrorCode],al 		  ; save al error code
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	mov    al,byte[FatModErrorCode] 		  ; save al error code
	stc						  ;
	ret						  ;

;=======================================================  ;
;  MakeDir.                                               ;
;=======================================================  ;
MakeDir:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	cmp	dword[Fatmod],0 			  ;
	je	MakeDirErrorNoMod			  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,3					  ;
	mov	eax,5					  ; Create subdirectory
	call	[Fatmod]				  ;
	jc	MakeDirError				  ;
  MakeDirOk:						  ;
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	clc						  ;
	ret						  ;

;=======================================================  ;
;  Error module not loaded.                               ;
;=======================================================  ;
  MakeDirErrorNoMod:					  ;
	mov	al,5					  ;
;=======================================================  ;
;  MakeDir Error.                                         ;
;=======================================================  ;
  MakeDirError: 					  ;
	mov    byte[FatModErrorCode],al 		  ; save al error code
	pop    ds					  ;
	pop    es					  ;
	popad						  ;
	mov    al,byte[FatModErrorCode] 		  ; save al error code
	stc						  ;
	ret						  ;

;=======================================================  ;
;  FindDir.                                               ;
;=======================================================  ;
FindDir:						  ;
	pushad						  ;
	push	es					  ;
	push	ds					  ;
	cmp	dword[Fatmod],0 			  ;
	je	FindDirErrorNoMod			  ;
	mov	ax,18h					  ;
	mov	es,ax					  ;
;=======================================================  ;
;  change to cli dir.                                     ;
;=======================================================  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,3					  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	jc	FindDirError				  ;
  FindDirOk:						  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
;  Error module not loaded.                               ;
;=======================================================  ;
  FindDirErrorNoMod:					  ;
	mov	al,5					  ;
;=======================================================  ;
;  Error Path not found.                                  ;
;=======================================================  ;
  FindDirError: 					  ;
	mov	byte[FatModErrorCode],al		  ;
	pop	ds					  ;
	pop	es					  ;
	popad						  ;
	mov	al,byte[FatModErrorCode ]		  ; restore error code
	stc						  ;
	ret						  ;

FileColorDir = 0x02					  ;
Fatmod	    dd 0					  ;
;=======================================================  ;
;  dir function using module.                             ;
;=======================================================  ;                                                          
DirFunctionMod: 					  ;
	push	es					  ;
	push	ds					  ;
	pushad						  ;
	mov	dword[Dir_Count],0			  ;
	mov	dword[File_Count],0			  ;
	call	[GetTextColor]				  ;
	mov	[defaultTcolor],al			  ;
	mov	dword[TotalFileSize],0			  ;
;=======================================================  ;
;  Get Default Drive                                      ;
;=======================================================  ;
	call	[GetBootDrive]				  ;
	inc	bl					  ;
	mov	byte [drive],bl 			  ;
	add	bl,40h					  ;
	mov	byte[DriveN],bl 			  ;
	mov	byte[Drive2],bl 			  ;
;=======================================================  ;
;  clear buffer.                                          ;
;=======================================================  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,CreateFileTempDirBuff+1		  ;
	rep	stosb					  ;
;=======================================================  ;
;  clear buffer.                                          ;
;=======================================================  ;
	mov	al,' '					  ;
	mov	ecx,64					  ;
	mov	edi,CreateFileTempDirBuff2+1		  ;
	rep	stosb					  ;
;=======================================================  ;
;  Get Current Directory                                  ;
;=======================================================  ;                                                            ;
	mov	esi,CreateFileTempDirBuff+1		  ;
	mov	eax,15					  ;
	call	[Fatmod]				  ; Get_Current_Directory
;=======================================================  ;
;  test for cli arguements.                               ;
;=======================================================  ;
	mov	esi,dword[CommandBufferAddress] 	  ;
	add	esi,3					  ;
	mov	al,byte[esi]				  ;
	cmp	al,' '					  ;
	jne	NoArguements				  ;
;=======================================================  ;
;  change to cli dir.                                     ;
;=======================================================  ;
	mov	edx,dword[CommandBufferAddress] 	  ;
	add	edx,4					  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	jc	DirFunction1_error			  ;
  NoArguements: 					  ;
;=======================================================  ;
;  Get Current Directory                                  ;
;=======================================================  ;                                                            ;
	mov	esi,CreateFileTempDirBuff2+1		  ;
	mov	eax,15					  ;
	call	[Fatmod]				  ; Get_Current_Directory
	;jc      DirFunction1_error                       ;
;=======================================================  ;
;  get the dir name                                       ;
;=======================================================  ;
	mov	esi,NextLine				  ;
	call	[PrintString_0] 			  ;
	mov	esi,CurrantDirMsg			  ;
	call	[PrintString_0] 			  ;
	mov	esi,Drive2				  ;
	call	[PrintString_0] 			  ;
	mov	esi,CreateFileTempDirBuff2+1		  ;
	call	[PrintString_0] 			  ;
	mov	esi,NextLine				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
;  Set DTA buffer                                         ;
;=======================================================  ;
	mov	edx,DTAbuffer				  ;
	mov	eax,3					  ;
	call	[Fatmod]				  ; SetDTA_Address
	mov	edx,FileNames				  ;
	mov	ecx,3dh 				  ; = do not show hidden files; show all files = 3fh
	mov	eax,16					  ;
	call	[Fatmod]				  ; Find_First
	jc	DirFunctionExitFirst			  ;
	mov	esi, NextLine				  ;
	call	[PrintString_0] 			  ;
	mov	al,FileColorDir 			  ; file color
	call	[TextColor]				  ;
	mov	esi,fileName				  ;
	call	[PrintString_0] 			  ;
	call	[GetTextPos]				  ;
	mov	al,12					  ;
	call	[SetCursorPos]				  ;
	mov	al,' '					  ;
	call	[PrintCharCursor]			  ;
	mov	al,byte[defaultTcolor]			  ;
	call	[TextColor]				  ;
	call	Print_files_size_in_bytes		  ;
	mov	esi,SpaceDir				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
; Print files date.                                       ;
;=======================================================  ;
	pushad						  ;
	call	file_date				  ;
	popad						  ;
	mov	esi,SpaceDir				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
; Print files time.                                       ;
;=======================================================  ;
	pushad						  ;
	call	file_time				  ;
	popad						  ;
	mov	esi, NextLine				  ;
	call	[PrintString_0] 			  ;
DirFunctionLoop:					  ;
	mov	eax,17					  ;
	call	[Fatmod] ;Find_Next                       ;
	jc	DirFunctionExit 			  ;
	mov	al,FileColorDir 			  ; file color
	call	[TextColor]				  ;
	mov	esi,fileName				  ;
	call	[PrintString_0] 			  ;
	call	[GetTextPos]				  ;
	mov	al,12					  ;
	call	[SetCursorPos]				  ;
	mov	al,' '					  ;
	call	[PrintCharCursor]			  ;
	mov	al,byte[defaultTcolor]			  ;
	call	[TextColor]				  ;
	call	Print_files_size_in_bytes		  ;
	mov	esi,SpaceDir				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
; Print files date.                                       ;
;=======================================================  ;
	pushad						  ;
	call	file_date				  ;
	popad						  ;
	mov	esi,SpaceDir				  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
; Print files time.                                       ;
;=======================================================  ;
	pushad						  ;
	call	file_time				  ;
	popad						  ;
	mov	esi, NextLine				  ;
	call	[PrintString_0] 			  ;
	jmp	DirFunctionLoop 			  ;
DirFunctionExitFirst:					  ;
	mov	esi,NextLine				  ;
	call	[PrintString_0] 			  ;
DirFunctionExit:					  ;
;=======================================================  ;
; print number of file & tolal number of bytes.           ;
;=======================================================  ;
	mov	eax,dword[File_Count]			  ;
	mov	[hex_val],eax				  ;
	cmp	eax,0					  ;
	jne	NotZero1				  ;
	mov	esi,BytesZero +3			  ;
	call	[PrintString_0] 			  ;
	jmp	PrintZero1				  ;
  NotZero1:						  ;
	call	testhex 				  ;
	mov	esi,numbuff2 +3 			  ;
	call	[PrintString_0] 			  ;
  PrintZero1:						  ;
	mov	esi,FileSizeMsg 			  ;
	call	[PrintString_0] 			  ;
	mov	eax,dword[TotalFileSize]		  ;
	mov	[hex_val],eax				  ;
	cmp	eax,0					  ;
	jne	NotZero2				  ;
	mov	esi,BytesZero				  ;
	call	[PrintString_0] 			  ;
	jmp	PrintZero2				  ;
  NotZero2:						  ;
	call	testhex 				  ;
	mov	esi,numbuff2				  ;
	call	[PrintString_0] 			  ;
  PrintZero2:						  ;
	mov	esi,TolalSizeMsg			  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
; print number of dir.                                    ;
;=======================================================  ;
	mov	eax,dword[Dir_Count]			  ;
	mov	[hex_val],eax				  ;
	cmp	eax,0					  ;
	jne	NotZero3				  ;
	mov	esi,BytesZero +3			  ;
	call	[PrintString_0] 			  ;
	jmp	PrintZero3				  ;
  NotZero3:						  ;
	call	testhex 				  ;
	mov	esi,numbuff2 +3 			  ;
	call	[PrintString_0] 			  ;
  PrintZero3:						  ;
	mov	esi,DirNumberMsg			  ;
	call	[PrintString_0] 			  ;
;=======================================================  ;
;  free bytes.                                            ;
;=======================================================  ;
	mov	eax,4					  ;
	call	[Fatmod]				  ; Get_disk_free_space
	cmp	ax,0FFFFh				  ; drive invalid if AX = 0FFFFh
	jz	harddrive_free_ret			  ;
	mul	cx					  ;
	mul	bx					  ;
	mov	cx,ax					  ;
	mov	ax,dx					  ;
	shl	eax,16					  ;
	mov	ax,cx					  ;
	mov	[hex_val],eax				  ;
	call	testhex 				  ;
	mov	esi,numbuff2				  ;
	call	[PrintString_0] 			  ;
	mov	esi,FreeBytesMsg			  ;
	call	[PrintString_0] 			  ;
harddrive_free_ret:					  ;
	mov	edx,CreateFileTempDirBuff		  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	popad						  ;
	pop	ds					  ;
	pop	es					  ;
	clc						  ;
	ret						  ;
;=======================================================  ;
; Print files size in bytes.                              ;
;=======================================================  ;
DirFunction1_error:					  ;
	popad						  ;
	pop	ds					  ;
	pop	es					  ;
	stc						  ;
	ret						  ;

;=======================================================  ;
; Print files size in bytes.                              ;
;=======================================================  ;
DirFunction1_error2:					  ;
	mov	edx,CreateFileTempDirBuff		  ;
	mov	eax,7					  ;
	call	[Fatmod]				  ; Set_Current_Directory
	popad						  ;
	pop	ds					  ;
	pop	es					  ;
	stc						  ;
	ret						  ;

;=======================================================  ;
; Print files size in bytes.                              ;
;=======================================================  ;                                                                ;
Print_files_size_in_bytes:				  ;
	pushad						  ;
	mov	al,byte[Attributes]			  ;
	test	al,10h					  ;
	jnz	ItsA_Dir				  ;
	inc	dword[File_Count]			  ;
	mov	esi,fileSize				  ;
	add	esi,2					  ;
	lodsw						  ;
	shl	eax,16					  ;
	mov	esi,fileSize				  ;
	lodsw						  ;
	mov	[hex_val],eax				  ;
	add	dword[TotalFileSize],eax		  ;
	call	testhex 				  ;
	mov	esi,SpaceDir				  ;
	call	[PrintString_0] 			  ;
	mov	esi,numbuff2				  ;
	call	[PrintString_0] 			  ;
	popad						  ;
	ret						  ;
ItsA_Dir:						  ;
	inc	dword[Dir_Count]			  ;
	mov	esi,LabelDir				  ;
	call	[PrintString_0] 			  ;
	popad						  ;
	ret						  ;
;=======================================================  ;
;  file_time.                                             ;
;=======================================================  ;
file_time:						  ; puts file_time into buffer as ASCII
	xor	ecx,ecx 				  ;
	mov	edi,filedate				  ;
	mov	ax,word [fileTime]			  ; offset of file's time in DTA
	mov	bx,ax					  ;
  file_time_hour:					  ;
	and	ax,0F800h				  ;
	mov	cl,11					  ;
	shr	ax,cl					  ;
	test	al,al					  ;
	jz	file_time_midnight			  ;
	cmp	al,12					  ;
	jb	file_time_morning			  ;
	jz	file_time_afternoon			  ;
	sub	al,12					  ; change from 24 hour to 12 hour
  file_time_afternoon:					  ;
	mov	byte[PmorAm],'p'			  ;
	jmp	file_time_continue			  ;
  file_time_midnight:					  ;
	add	al,12					  ; midnight should be 12am, not 0am
  file_time_morning:					  ;
	mov	byte[PmorAm],'a'			  ;
  file_time_continue:					  ;
	aam						  ; =
	xchg	ah,al					  ; = 4 bytes
	or	ax,'00' 				  ; convert hour, store it
	stosw						  ;
	mov	al,COLON				  ;
	stosb						  ; store hour/minute divider ':'
	mov	ax,bx					  ;
  file_time_minutes:					  ;
	and	ax,7E0h 				  ;
	mov	cl,5					  ;
	shr	ax,cl					  ;
	aam						  ; =
	xchg	ah,al					  ; = 4 bytes
	or	ax,'00' 				  ; convert minutes, store it
	stosw						  ;
	mov	al,byte[PmorAm] 			  ;
	stosb						  ; store minute/seconds divider ':'
  file_time_seconds:					  ;
	mov	byte [edi],0				  ;
	mov	esi,filedate				  ; move to next line
	call	[PrintString_0] 			  ;
  file_time_ret:					  ;
	ret						  ;
;=======================================================  ;
;file_date.                                               ;
;=======================================================  ;
file_date:						  ; puts file_date into buffer as ASCII
	mov	edi,filedate				  ;
	mov	ax,word [fileDate]			  ; offset of file's date in DTA
	test	ax,ax					  ;
	jnz	file_date_valid 			  ;
	ret						  ;
							  ;
file_date_valid:					  ;
	mov	bx,ax					  ;
  file_date_month:					  ;
	and	ax,1E0h 				  ;
	mov	cl,5					  ;
	shr	ax,cl					  ;
	mov	cx,10					  ;
	div	cl					  ;
	or	ax,'00' 				  ; convert day to ASCII number
	stosw						  ;  and store it
	mov	al,COMMA				  ;
	stosb						  ;
	mov	ax,bx					  ;
  file_date_day:					  ;
	and	ax,1Fh					  ;
	mov	cx,10					  ;
	div	cl					  ;
							  ;
	or	ax,'00' 				  ; convert day to ASCII number
	stosw						  ;  and store it
	mov	ax,COMMA				  ;
	stosb						  ; put a comma after it
	mov	ax,bx					  ;
  file_date_year:					  ;
	and	ax,0FE00h				  ;
	xchg	ah,al					  ;
	shr	al,1					  ;
	add	ax,1980 				  ;
	xor	edx,edx 				  ;
	mov	ebx,4					  ;
	jmp	file_date_skip_xchg			  ;
  file_date_year_digit: 				  ;
	xchg	cx,bx					  ;
  file_date_skip_xchg:					  ;
	div	cx					  ;
	xchg	ax,dx					  ;
	or	al,'0'					  ;
	push	ax					  ;
	xor	ax,ax					  ;
	xchg	ax,dx					  ;
	xchg	cx,bx					  ;
	loop	file_date_year_digit			  ;
	mov	ecx,4					  ;
  file_date_year_store: 				  ;
	pop	ax					  ;
	stosb						  ;
	loop	file_date_year_store			  ; store file_date's year in buffer
	mov	byte [edi],0				  ;
	mov	esi,filedate				  ; move to next line
	call	[PrintString_0] 			  ;
  file_date_ret:					  ;
	ret						  ;
;=======================================================  ;
;  Data                                                   ;
;=======================================================  ;
    COLON = ':' 					  ;
    COMMA = '-' 					  ;
;=======================================================  ;
;  File  Name                                             ;
;=======================================================  ;
    drive	   db 0 				  ;
    Dir_Count	   dd 0 				  ;
    File_Count	   dd 0 				  ;
    TotalFileSize  dd 0 				  ;
    defaultTcolor  db 0 				  ;
    PmorAm	   db 0 				  ;
    CurrantDirMsg  db ' Directory of ',0		  ;
    VolumeMsg	   db ' Volume in drive '		  ;
    DriveN	   db 0 				  ;
		   db ' is ',0				  ;
    Drive2	   db 0 				  ;
		   db ':\',0				  ;
    FileSizeMsg    db ' File(s)    ',0			  ;
    DirNumberMsg   db ' Dir(s)     ',0			  ;
    TolalSizeMsg   db ' Bytes.',13,10,0 		  ;
    FreeBytesMsg   db ' Bytes free.',13,10,0		  ;
    BytesZero	   db '            0',0 		  ;
    LabelDir:	   db '          <Dir>',0		  ;
    filedate	   db 16 dup(0) 			  ;
    filedateend    db 0 				  ;
    SpaceDir:	   db "  ",0				  ;
    NextLine:	   db 10,13,0				  ;
    FileNames	   db '*.*',0				  ; file name
    GetDirFunction db 64 dup(' ')			  ;
    GetDirFunctEnd db 0 ;13,10,0                          ;
;=======================================================  ;
;  DTA Buffer                                             ;
;=======================================================  ;
    DTAbuffer:	   db 21 dup(?) 			  ; header info - not used
    Attributes:    db 0 				  ; Attributes
    fileTime:	   dw 0 				  ; time
    fileDate:	   dw 0 				  ; date
    fileSize:	   dd 0 				  ; size
    fileName:	   db 14 dup(' ')			   ; name
    fileExten:	   db 3 dup(' ')			  ; file exten
    EndOfString:   db 0 				  ; zero
							  ;
  CreateFileTempDirBuff:	 db '\' 		  ;
				 db 64 dup(' ') 	  ;
				 db 0			  ;
							  ;
  CreateFileTempDirBuff2:	 db '\' 		  ;
				 db 64 dup(' ') 	  ;
				 db 0			  ;
  TempBuff1_mod:		 db 68 dup(' ') 	  ;
				 db 0			  ;
  TempBuff2_mod:		 db 64 dup(' ') 	  ;
				 db 0			  ;
